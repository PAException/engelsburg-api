swagger: "2.0"
info:
  description: "Endpoint documentation of **v3** of the engelsburg-api"
  version: "v3"
  title: "Engelsburg-API"
host: "localhost"
tags:
  - name: "auth"
    description: "Authentication endpoint"
  - name: "article"
    description: "Access to published articles of homepage **(PUBLIC)**"
  - name: "cafeteria"
    description: "Access to cafeteria information **(PUBLIC)**"
  - name: "event"
    description: "Access to events **(PUBLIC)**"
  - name: "grade"
    description: "Access to grades"
  - name: "info"
    description: "Access to general information"
  - name: "notification"
    description: "Access to notification settings and devices"
  - name: "solar_system"
    description: "Access to solar system information **(PUBLIC)**"
  - name: "substitute"
    description: "Access to substitutes and substituteMessages"
  - name: "task"
    description: "Access to tasks"
  - name: "timetable"
    description: "Access to timetable"
  - name: "user"
    description: "Access to user data actions"
schemes:
  - "http"
  - "https"
paths:
  /auth/signup:
    post:
      tags:
        - "auth"
      summary: "Sign up"
      operationId: "singUp"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "Body"
          schema:
            type: "object"
            properties:
              email:
                type: "string"
                example: "hello@gmail.com"
                description: "[*Required*]"
              password:
                type: "string"
                example: "password123"
                description: "[*Required*]"
              schoolToken:
                type: "string"
                example: "schoolToken123"
                description: "[*Required*]"
      responses:
        "200":
          description: "OK - Successful operation"
          schema:
            $ref: '#/definitions/AuthResponse'
  /auth/login:
    post:
      tags:
        - "auth"
      summary: "Login and retrieve refresh token"
      operationId: "login"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "Body"
          schema:
            type: "object"
            properties:
              email:
                type: "string"
                example: "hello@gmail.com"
                description: "[*Required*]"
              password:
                type: "string"
                example: "password123"
                description: "[*Required*]"
      responses:
        "200":
          description: "OK - Successful operation"
          schema:
            $ref: '#/definitions/AuthResponse'
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /auth/refresh:
    get:
      tags:
        - "auth"
      summary: "Login and retrieve JWT token"
      operationId: "refresh"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "query"
          name: "Refresh token"
          type: "string"
          required: true
      responses:
        "200":
          description: "OK - Successful operation"
          schema:
            $ref: '#/definitions/AuthResponse'
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /auth/request_reset_password:
    post:
      tags:
        - "auth"
      summary: "Request to reset password"
      operationId: "requestResetPassword"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "query"
          type: "string"
          name: "email"
          description: "Email to send to reset the password"
          required: true
      responses:
        "200":
          description: "OK - Successful operation"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /auth/reset_password:
    patch:
      tags:
        - "auth"
      summary: "Reset password"
      operationId: "resetPassword"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "Body"
          schema:
            type: "object"
            properties:
              email:
                type: "string"
                example: "hello@gmail.com"
                description: "[*Required*]"
              password:
                type: "string"
                example: "password123"
                description: "[*Required*]"
              token:
                type: "string"
                example: "8zp9nwe7v4"
                description: "[*Required*]"
      responses:
        "200":
          description: "OK - Successful operation"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /auth/verify/{token}:
    patch:
      tags:
        - "auth"
      summary: "Verify account"
      operationId: "verifyAccount"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: *none*"
          required: true
        - in: "path"
          name: "token"
          type: "string"
          description: "Token send in email"
          required: true
      responses:
        "200":
          description: "OK - Successful operation"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /auth/oauth/{service}:
    get:
      tags:
        - "auth"
      summary: "Request a oauth signup"
      operationId: "requestOAuth"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          type: string
          name: "service"
          required: true
          description: "Service name (currently only google)"
        - in: "query"
          name: "schoolToken"
          type: "string"
          description: "schoolToken to verify account"
          required: true
      responses:
        "200":
          description: "OK - Successful operation"
          schema:
            $ref: '#/definitions/AuthResponse'
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /article:
    get:
      tags:
        - "article"
      summary: "Get published articles of homepage"
      operationId: "getArticles"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "query"
          type: "number"
          name: "date"
          description: "All articles after timestamp (ms) will be listed (min: 0, default: current ms, so all articles will be listed from new to old. If date specified from old to new)"
          required: false
        - in: "query"
          type: "number"
          name: "page"
          description: "Specify page (min: 0, default: 0)"
          required: false
        - in: "query"
          type: "number"
          name: "size"
          description: "Specify articles per page (min: 1, max: 20, default: 20)"
          required: false
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              articles:
                type: "array"
                items:
                  $ref: "#/definitions/Article"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /article/{articleId}:
    get:
      tags:
        - "article"
      summary: "Get specific article of homepage"
      operationId: "getArticle"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "path"
          type: "number"
          name: "articleId"
          description: "ArticleId to identify article"
          required: true
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Article"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /article/save/{articleId}:
    patch:
      tags:
        - "article"
      summary: "Save specific article of homepage (PRIVATE)"
      operationId: "saveArticle"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "path"
          type: "number"
          name: "articleId"
          description: "ArticleId to identify article"
          required: true
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **article.save.write.self**"
          required: true
      responses:
        "200":
          description: "Successful operation"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
    delete:
      tags:
        - "article"
      summary: "Remove save of specific article of homepage (PRIVATE)"
      operationId: "unsaveArticle"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "path"
          type: "number"
          name: "articleId"
          description: "ArticleId to identify article"
          required: true
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **article.save.delete.self**"
          required: true
      responses:
        "200":
          description: "Successful operation"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
    get:
      tags:
        - "article"
      summary: "Get all saved articles of user (PRIVATE)"
      operationId: "getSavedArticles"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **article.save.read.self**"
          required: true
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: object
            properties:
              savedArticles:
                type: array
                items:
                  type: number
                  example: 2134
                  description: "article number"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /article/update:
    patch:
      tags:
        - "article"
      summary: "Check if articles have updated"
      operationId: "updateArticles"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: body
          name: "Body"
          required: true
          schema:
            type: object
            additionalProperties:
              type: string
            example:
              123: "e9284ac63c0958411d5138a966375fa41ae2e1da"
              232: "d5c8f2be4da27a8224a8a41ec8b1055d23282a50"
              234: "fc8161f14ce7f01b9887b31cf9d68efedf562b4a"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: object
            properties:
              articleIds:
                type: array
                items:
                  type: integer
                  example: 234
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /cafeteria:
    get:
      tags:
        - "cafeteria"
      summary: "Get cafeteria information"
      description: "Returns information of cafeteria"
      operationId: "getCafeteria"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: object
            properties:
              content:
                type: string
                example: "<div class=\"wp-block-image\"><figure class=\"alig..."
              link:
                type: string
                example: "https://engelsburg.smmp.de/leben-an-der-schule/cafeteria/"
              mediaURL:
                type: string
                example: "https://d1855q9qdxb6ev.cloudfront.net/files/2021/05/WhatsApp-Image-2021-05-19-at-08.53.32-1-409x640.jpeg?iv=1838"
              blurHash:
                type: "string"
                example: "U8EVjC4:~q00~S4m4o4o9sRjXU?Gt7IU?bE1"
                description: "[*Nullable*]"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /event:
    get:
      tags:
        - "event"
      summary: "Get current events"
      operationId: "getEvents"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
      responses:
        "200":
          description: "OK - Successful operation"
          schema:
            $ref: "#/definitions/Event"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /grade:
    post:
      tags:
        - "grade"
      summary: "Create a grade"
      description: "Create and returns grade"
      operationId: "createGrade"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **grade.write.self**"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "body"
          name: "Body"
          schema:
            type: "object"
            properties:
              name:
                type: "string"
                example: "Klausur"
                description: "Name of grade"
              share:
                type: "number"
                example: 0.5
                description: "Float of total share of subject"
              value:
                type: "number"
                example: 5
                description: "Actual grade"
              subject:
                type: "string"
                example: "mathematics"
                description: "Subject of grade"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Grade"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
    patch:
      tags:
        - "grade"
      summary: "Update a grade"
      description: "Update and returns grade"
      operationId: "updateGrade"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **grade.write.self**"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "body"
          name: "Body"
          schema:
            $ref: "#/definitions/Grade"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Grade"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
    get:
      tags:
        - "grade"
      summary: "Get grades"
      description: "Get grades of subject"
      operationId: "getGrades"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **grade.read.self**"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "query"
          type: "string"
          name: "Subject"
          description: "Subject to get grades to (optional)"
          required: false
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Grade"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /grade/{gradeId}:
    delete:
      tags:
        - "grade"
      summary: "Delete grade"
      description: "Delete grade by gradeId"
      operationId: "deleteGrade"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **grade.delete.self**"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "path"
          type: number
          name: "gradeId"
          description: "GradeId to delete grade for"
          required: true
      responses:
        "200":
          description: "Successful operation"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /info/classes:
    get:
      tags:
        - "info"
      summary: "Get current classes"
      operationId: "getClasses"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **info.classes.read.all**"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Classes"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /info/teacher:
    get:
      tags:
        - "info"
      summary: "Get all teachers"
      operationId: "getTeachers"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **info.teacher.read.all**"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              teachers:
                type: "array"
                items:
                  $ref: "#/definitions/Teacher"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /info/teacher/{Abbreviation}:
    get:
      tags:
        - "info"
      summary: "Get information about specific teacher"
      operationId: "getTeacher"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **info.teacher.read.all**"
          required: true
        - in: "path"
          name: "Abbreviation"
          type: "string"
          description: "Abbreviation of teacher"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Teacher"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /user/notification:
    patch:
      tags:
        - "notification"
      summary: "Update notification settings"
      description: "Update notification settings of user"
      operationId: "updateNotificationSetting"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **notification.settings.write.self**"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "body"
          name: "Body"
          schema:
            type: "object"
            properties:
              enabled:
                type: "boolean"
                example: true
              byTimetable:
                type: "boolean"
                example: true
      responses:
        "200":
          description: "Successful operation"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
    get:
      tags:
        - "notification"
      summary: "Get notification settings"
      description: "Get notification settings of user"
      operationId: "getNotificationSettings"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **notification.settings.write.self**"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              enabled:
                type: "boolean"
                example: true
              byTimetable:
                type: "boolean"
                example: true
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /user/notification/device:
    post:
      tags:
        - "notification"
      summary: "Add notification device"
      description: "Add notification device of user"
      operationId: "addNotificationDevice"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **notification.settings.write.self**"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "body"
          name: "Body"
          schema:
            type: object
            properties:
              token:
                type: "string"
                example: "jgsyfskzjxsgnfhjshgnfxmsaukhnmfxkcsaglfjizxann"
                description: "Token of firebase cloud messaging"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
    delete:
      tags:
        - "notification"
      summary: "Remove notification device"
      description: "Remove a notification device of user"
      operationId: "deleteNotificationDevice"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **notification.settings.write.self**"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "body"
          name: "Body"
          schema:
            type: object
            properties:
              token:
                type: "string"
                example: "jgsyfskzjxsgnfhjshgnfxmsaukhnmfxkcsaglfjizxann"
                description: "Token of firebase cloud messaging"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /solar_system:
    get:
      tags:
        - "solar_system"
      summary: "Get solar system information"
      description: "Returns information of the solar system"
      operationId: "getSolarSystem"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: object
            properties:
              date:
                type: string
                example: "09.07.2021"
              energy:
                type: string
                example: "78.213,24 kWh"
              co2avoidance:
                type: string
                example: "54.749,27 kg"
              payment:
                type: string
                example: "36.564,69"
              text:
                type: string
                example: "Die Solaranlage..."
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /substitute:
    get:
      tags:
        - "substitute"
      summary: "Get all substitutes"
      description: "Returns current and future substitutes by default"
      operationId: "getSubstitutes"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **substitute.read.current**, (*substitute.read.all* to read past substitutes)"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "query"
          type: "number"
          name: "Date"
          description: "Timestamp (ms)"
          required: false
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Substitutes"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /substitute/className:
    get:
      tags:
        - "substitute"
      summary: "Get substitutes by className"
      description: "Returns current and future substitutes by default"
      operationId: "getSubstitutesByClassName"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **substitute.read.current**, (*substitute.read.all* to read past substitutes)"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "query"
          type: "string"
          name: "className"
          description: "To filter by"
          required: true
        - in: "query"
          type: "number"
          name: "date"
          description: "Filter by date (Timestamp (ms))"
          required: false
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Substitutes"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /substitute/teacher:
    get:
      tags:
        - "substitute"
      summary: "Get substitutes by teacher"
      description: "Returns current and future substitutes by default"
      operationId: "getSubstitutesByTeacher"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **substitute.read.current**, (*substitute.read.all* to read past substitutes)"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "query"
          type: "string"
          name: "className"
          description: "Filter by className"
          required: false
        - in: "query"
          type: "number"
          name: "date"
          description: "Filter by date (Timestamp (ms))"
          required: false
        - in: "query"
          type: "string"
          name: "teacher"
          description: "Filter by teacher"
          required: true
        - in: "query"
          type: "number"
          name: "lesson"
          description: "Filter by lesson"
          required: false
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Substitutes"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /substitute/substituteTeacher:
    get:
      tags:
        - "substitute"
      summary: "Filter substitutes by substituteTeacher"
      description: "Returns current and future substitutes by default"
      operationId: "getSubstitutesBySubstituteTeacher"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **substitute.read.current**, (*substitute.read.all* to read past substitutes)"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "body"
          name: "Body"
          schema:
            type: "object"
            properties:
              teacher:
                type: "string"
                example: "KRÄ"
                description: "[*Required*]"
              date:
                type: "number"
                example: 1600509466
                description: "Timestamp (ms)"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Substitutes"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /substitute/message:
    get:
      tags:
        - "substitute"
      summary: "Get all substituteMessages"
      description: "Returns current and future substitute messages by default"
      operationId: "getSubstitutesMessages"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **substitute.message.read.current**, (*substitute.message.read.all* to read past substitutes)"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "query"
          type: "number"
          name: "Date"
          description: "Timestamp (ms)"
          required: false
      responses:
        "200":
          description: "OK - Successful operation"
          schema:
            $ref: "#/definitions/SubstituteMessage"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /task:
    post:
      tags:
        - "task"
      summary: "Create a task"
      description: "Create and returns task"
      operationId: "createTask"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **task.write.self**"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "body"
          name: "Body"
          schema:
            type: "object"
            properties:
              title:
                type: "string"
                example: "Mathebuch"
                description: "Title of task"
              created:
                type: "number"
                example: 1624990706194
                description: "Time of creation in millis"
              due:
                type: "number"
                example: 1624990932194
                description: "Due date in millis"
              subject:
                type: "string"
                example: "mathematics"
                description: "Subject of task"
              content:
                type: "string"
                example: "S225 Nr.6"
                description: "Content of task"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Task"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
    patch:
      tags:
        - "task"
      summary: "Update a task"
      description: "Update and returns task"
      operationId: "updateTask"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **task.write.self**"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "body"
          name: "Body"
          schema:
            type: "object"
            properties:
              taskId:
                type: "number"
                example: "1"
                description: "Id of task to update and delete"
              title:
                type: "string"
                example: "Mathebuch"
                description: "Title of task"
              due:
                type: "number"
                example: 1624990932194
                description: "Due date in millis"
              subject:
                type: "string"
                example: "mathematics"
                description: "Subject of task"
              content:
                type: "string"
                example: "S225 Nr.6"
                description: "Content of task"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Task"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
    get:
      tags:
        - "task"
      summary: "Get tasks"
      description: "Get tasks after"
      operationId: "getTasks"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **task.read.self**"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "query"
          type: "number"
          name: "page"
          description: "Specify page (min: 0, default: 0)"
          required: false
        - in: "query"
          type: "number"
          name: "size"
          description: "Specify articles per page (min: 1, max: 20, default: 20)"
          required: false
        - in: "query"
          type: "number"
          name: "date"
          description: "All articles after timestamp (ms) will be listed (min: 0, default: current ms, so all articles will be listed from new to old. If date specified from old to new)"
          required: false
        - in: "query"
          type: boolean
          name: "onlyUndone"
          description: "Only get tasks which aren't mark as done"
          required: false
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: object
            properties:
              tasks:
                type: array
                items:
                  $ref: "#/definitions/Task"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /task/{taskId}:
    delete:
      tags:
        - "task"
      summary: "Delete task"
      description: "Delete task by taskId"
      operationId: "deleteTask"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **task.delete.self**"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "path"
          type: number
          name: "taskId"
          description: "TaskId to delete grade for"
          required: true
      responses:
        "200":
          description: "Successful operation"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /task/done:
    patch:
      tags:
        - "task"
      summary: "Mark task as done"
      description: "Mark a task as done"
      operationId: "updateTaskDone"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **task.write.self**"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "body"
          name: "Body"
          schema:
            type: "object"
            properties:
              taskId:
                type: "number"
                example: "1"
                description: "Id of task to update and delete"
              done:
                type: "boolean"
                example: true
                description: "True if task done"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /timetable:
    post:
      tags:
        - "timetable"
      summary: "Set timetable entry"
      description: "Set a new or existing timetable entry"
      operationId: "setTimetable"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **timetable.write.self**"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "body"
          name: "Body"
          schema:
            $ref: "#/definitions/Timetable"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
    get:
      tags:
        - "timetable"
      summary: "Get timetable entries"
      description: "Get timetable entries of lesson or/and day"
      operationId: "getTimetable"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **timetable.read.self**"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "query"
          type: integer
          name: "day"
          description: "Filter by day"
          required: false
        - in: "query"
          type: integer
          name: "lesson"
          description: "Filter by lesson"
          required: false
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: object
            properties:
              entries:
                type: array
                items:
                  $ref: "#/definitions/Timetable"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
    delete:
      tags:
        - "timetable"
      summary: "Delete timetable entry"
      description: "Delete timetable entry by lesson and day"
      operationId: "deleteTimetable"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **timetable.delete.self**"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
        - in: "body"
          name: "Body"
          schema:
            type: object
            properties:
              day:
                type: number
                example: 2
              lesson:
                type: number
                example: 6
      responses:
        "200":
          description: "Successful operation"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
  /user/data:
    get:
      tags:
        - "user"
      summary: "Get userdata"
      description: "Get whole saved information about the user"
      operationId: "getUserData"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **user.data.read.self**"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: object
            properties:
              userId:
                type: string
                example: "2bc2cee8-4c4c-415e-9af0-e4add53d4023"
                description: "UserId of user"
              data:
                type: array
                items:
                  properties:
                    nameKey:
                      type: string
                      example: "Task"
                      description: "NameKey of section"
                    queriedData:
                      type: object
                      description: "Object with user information of this section"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
    delete:
      tags:
        - "user"
      summary: "Delete userdata"
      description: "Delete whole user and saved information"
      operationId: "deleteUserData"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Json-Web-Token"
          description: "Required scopes: **user.data.delete.self**"
          required: true
        - in: "header"
          type: "string"
          name: "Hash"
          description: "Hash of last request to check if response changed"
          required: false
      responses:
        "200":
          description: "Successful operation"
          headers:
            Hash:
              type: "string"
              description: "Hash of response body"
definitions:
  AuthResponse:
    type: object
    properties:
      token:
        type: string
        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        description: "Json-Web-Token for authentication"
      refreshToken:
        type: string
        example: "vCsghY7twza6dpgMpGVNTqEDKNVq8jsNgceHtxfXNQrWBgd8mHoFk2YDKzOSCBwKrW1P5mlZPyFyCuLbI1uRmHddkNmnHlNf0nec"
        description: "Refresh token to obtain new JWT"
      email:
        type: string
        example: "example.user@email.com"
        description: "Email address of user"
      verified:
        type: boolean
        example: "false"
        description: "If user is verified"
  Article:
    type: "object"
    properties:
      articleId:
        type: "number"
        example: 18
      date:
        type: "number"
        example: 1602194843562
      link:
        type: "string"
        example: "https://engelsburg.smmp.de/2020/10/02/informationsveranstaltungen-zur-aufnahme-2021/"
      title:
        type: "string"
        example: "Informationsveranstaltungen zur Aufnahme 2021"
      content:
        type: "string"
        example: "<p>Liebe Eltern, liebe Interessierte an der Engelsburg,</p>\n\n\n\n<p>nun beginnt die Zeit, ..."
      contentHash:
        type: string
        example: "e9284ac63c0958411d5138a966375fa41ae2e1da"
      mediaUrl:
        type: "string"
        example: "https://d1855q9qdxb6ev.cloudfront.net/files/2020/09/20190320-Postkarte-Schulpreis01-final1.jpg"
        description: "[*Nullable*]"
      blurHash:
        type: "string"
        example: "U8EVjC4:~q00~S4m4o4o9sRjXU?Gt7IU?bE1"
        description: "[*Nullable*]"
  Event:
    type: "object"
    properties:
      events:
        type: "array"
        items:
          type: "object"
          properties:
            date:
              type: "string"
              example: "2021-07-06"
            title:
              type: "string"
              example: "Zeugnisausgabe"
  Grade:
    type: "object"
    properties:
      gradeId:
        type: "number"
        example: "1"
        description: "Id of grade to update and delete"
      name:
        type: "string"
        example: "Klausur"
        description: "Name of the grade"
      share:
        type: "number"
        example: 0.5
        description: "Float of total share of subject"
      value:
        type: "number"
        example: 5
        description: "Actual grade"
      subject:
        type: "string"
        example: "mathematics"
        description: "Subject of grade"
  Classes:
    type: "object"
    properties:
      classes:
        type: "array"
        description: "Can be empty"
        items:
          type: "string"
          example: "5a"
  Teacher:
    type: "object"
    properties:
      abbreviation:
        type: "string"
        example: "AHE"
        description: "Abbreviation of the teacher in reference to substitutes"
      firstname:
        type: "string"
        example: "Christine"
        description: "Firstname of the teacher"
      surname:
        type: "string"
        example: "von der Ahé"
        description: "Surname of the teacher"
      gender:
        type: "string"
        example: "female"
        description: "female or male"
      mentionedPhD:
        type: "boolean"
        example: false
        description: "True if a PhD is mentioned"
      jobs:
        type: "array"
        items:
          type: "string"
          example: "Biologie"
  Substitutes:
    type: "object"
    properties:
      substitutes:
        type: "array"
        description: "Can be empty"
        items:
          type: "object"
          properties:
            date:
              type: "string"
              example: "2020-09-19"
              description: "Date format: yyyy-MM-dd"
            className:
              type: "string"
              example: "8c"
            lesson:
              type: integer
              example: 6
              description: "Can also be '8 - 9'"
            subject:
              type: "string"
              example: "M"
              description: "[*Nullable*]"
            substituteTeacher:
              type: "string"
              example: "EIC"
            teacher:
              type: "string"
              example: "KRÄ"
            type:
              type: "string"
              example: "Vertretung"
            substituteOf:
              type: "string"
              example: "Mi-2.9. / 6"
              description: "[*Nullable*]"
            room:
              type: "string"
              example: "H001"
              description: "[*Nullable*]"
            text:
              type: "string"
              example: "Aufg. den Schüler*innen bekannt"
              description: "[*Nullable*]"
  SubstituteMessage:
    type: "object"
    properties:
      substituteMessages:
        type: "array"
        description: "Can be empty"
        items:
          type: "object"
          properties:
            date:
              type: "string"
              example: "2020-09-19"
              description: "Date format: yyyy-MM-dd"
            absenceTeachers:
              type: "string"
              example: "GRB, GAR, STÖC, VOGL"
              description: "[*Nullable*]"
            absenceClasses:
              type: "string"
              example: "10c"
              description: "[*Nullable*]"
            affectedClasses:
              type: "string"
              example: "5a, 5c, 8d, 9a, E1, Q3"
              description: "[*Nullable*]"
            affectedRooms:
              type: "string"
              example: "H204, S304, R202"
              description: "[*Nullable*]"
            blockedRooms:
              type: "string"
              example: "H001, H207, S403, R204"
              description: "[*Nullable*]"
            messages:
              type: "string"
              example: "Die ... AG fällt heute aus!"
              description: "[*Nullable*]"
  Task:
    type: "object"
    properties:
      taskId:
        type: "number"
        example: "1"
        description: "Id of task to update and delete"
      title:
        type: "string"
        example: "Mathebuch"
        description: "Title of task"
      created:
        type: "number"
        example: 1624990706194
        description: "Time of creation in millis"
      due:
        type: "number"
        example: 1624990932194
        description: "Due date in millis"
      subject:
        type: "string"
        example: "mathematics"
        description: "Subject of task"
      content:
        type: "string"
        example: "S225 Nr.6"
        description: "Content of task"
      done:
        type: "boolean"
        example: true
        description: "Is task marked as done?"
  Timetable:
    type: "object"
    properties:
      day:
        type: number
        example: 2
      lesson:
        type: number
        example: 6
      subject:
        type: "string"
        example: "M"
      teacher:
        type: "string"
        example: "KRÄ"
      className:
        type: "string"
        example: "10c"
      room:
        type: "string"
        example: "H001"
  ErrorForbidden:
    type: "object"
    description: "A resource can't be accessed because of lacking permission"
    properties:
      status:
        type: "number"
        example: 403
      messageKey:
        type: "string"
        example: "FORBIDDEN"
      extra:
        type: "string"
        example: "substitutes"
  ErrorNotFound:
    type: "object"
    description: "A resource wasn't found"
    properties:
      status:
        type: "number"
        example: 404
      messageKey:
        type: "string"
        example: "NOT_FOUND"
      extra:
        type: "string"
        example: "substitutes"
  ErrorNotModified:
    type: "object"
    description: "The request resource assumed as not modified by the sent hash"
    properties:
      status:
        type: "number"
        example: 304
      messageKey:
        type: "string"
        example: "NOT_MODIFIED"
      extra:
        type: "string"
        example: "substitutes"
  ErrorAlreadyExists:
    type: "object"
    description: "A resource already exists"
    properties:
      status:
        type: "number"
        example: 409
      messageKey:
        type: "string"
        example: "ALREADY_EXISTS"
      extra:
        type: "string"
        example: "substitutes"
  ErrorInvalidParam:
    type: "object"
    description: "A given parameter is invalid"
    properties:
      status:
        type: "number"
        example: 400
      messageKey:
        type: "string"
        example: "INVALID_PARAM"
      extra:
        type: "string"
        example: "className"
  ErrorUnauthorized:
    type: "object"
    description: "The request is not authorized"
    properties:
      status:
        type: "number"
        example: 401
      messageKey:
        type: "string"
        example: "UNAUTHORIZED"
      extra:
        type: "string"
        example: "substitutes"
  ErrorJWTExpired:
    type: "object"
    description: "Sent JWT is expired: login again"
    properties:
      status:
        type: "number"
        example: 400
      messageKey:
        type: "string"
        example: "EXPIRED"
      extra:
        type: "string"
        example: "token"
  ErrorJWTInvalid:
    type: "object"
    description: "Sent JWT is invalid"
    properties:
      status:
        type: "number"
        example: 400
      messageKey:
        type: "string"
        example: "INVALID"
      extra:
        type: "string"
        example: "token"
  ErrorJWTFailed:
    type: "object"
    description: "JWT Authentication failed"
    properties:
      status:
        type: "number"
        example: 400
      messageKey:
        type: "string"
        example: "FAILED"
      extra:
        type: "string"
        example: "token"
  ErrorTooManyRequests:
    type: "object"
    description: "If you send too many requests in a specific time"
    properties:
      status:
        type: "number"
        example: 429
      messageKey:
        type: "string"
        example: "TOO_MANY_REQUESTS"
      extra:
        type: "string"
  ErrorInternalServerError:
    type: "object"
    description: "An internal server error occurred"
    properties:
      status:
        type: "number"
        example: 500
      messageKey:
        type: "string"
        example: "INTERNAL_SERVER_ERROR"
      extra:
        type: "string"
        example: "substitutes"
